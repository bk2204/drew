/*-
 * Copyright © 2000–2009 The Legion Of The Bouncy Castle
 * (http://www.bouncycastle.org)
 * Copyright © 2010–2011 brian m. carlson
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/* This has been ported from the Java version written by the Legion of the
 * Bouncy Castle.  This implementation supports arbitrary block sizes and
 * arbitrary key sizes, unlike the version in the aes directory.
 */

#include <internal.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <algorithm>

#include <drew/block.h>
#include "block-plugin.h"
#include "rijndael.hh"

HIDE()
static drew::Rijndael *rijndael_new(size_t blksz)
{
	drew::Rijndael *p = 0;
	switch (blksz)
	{
		case 16:
			p = new drew::Rijndael128;
			break;
		case 20:
			p = new drew::Rijndael160;
			break;
		case 24:
			p = new drew::Rijndael192;
			break;
		case 28:
			p = new drew::Rijndael224;
			break;
		case 32:
			p = new drew::Rijndael256;
			break;
	}
	return p;
}

extern "C" {

static const int rijndaelkeysz[] = { 16, 20, 24, 28, 32 };
static const int rijndael160keysz[] = { 16, 20, 24, 28, 32 };
static const int rijndael192keysz[] = { 16, 20, 24, 28, 32 };
static const int rijndael224keysz[] = { 16, 20, 24, 28, 32 };
static const int rijndael256keysz[] = { 16, 20, 24, 28, 32 };
static const int aes128keysz[] = {16};
static const int aes192keysz[] = {24};
static const int aes256keysz[] = {32};

static void str2bytes(uint8_t *bytes, const char *s, size_t len = 0)
{
	if (!len)
		len = strlen(s);

	unsigned x;
	for (size_t i = 0; i < (len / 2); i++) {
		sscanf(s+(i*2), "%02x", &x);
		bytes[i] = x;
	}
}

static bool test(const char *key, const char *plain, const char *cipher,
		size_t keybytes = 0, size_t blocksz = 16)
{
	using namespace drew;

	uint8_t kb[32], pb[32], cb[32], buf[32];
	str2bytes(kb, key, keybytes * 2);
	str2bytes(pb, plain, blocksz * 2);
	str2bytes(cb, cipher, blocksz * 2);

	if (!keybytes)
		keybytes = 16;

	Rijndael *ctx = rijndael_new(blocksz);
	ctx->SetKey(kb, keybytes);
	ctx->Encrypt(buf, pb);

	if (memcmp(buf, cb, blocksz))
		return false;

	ctx->SetKey(kb, keybytes);
	ctx->Decrypt(buf, cb);
	delete ctx;

	return !memcmp(buf, pb, blocksz);
}

static int rd_test(void *, const drew_loader_t *)
{
	int res = 0;

	const char *key =
		"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f";
	const char *pt = "00112233445566778899aabbccddeeff";
	res |= !test(key, pt, "69c4e0d86a7b0430d8cdb78070b4c55a", 16);
	res |= !test(key, pt, "dda97ca4864cdfe06eaf70a0ec0d7191", 24);
	res |= !test(key, pt, "8ea2b7ca516745bfeafc49904b496089", 32);
	res <<= 1;
	const char *key2 = "2b7e151628aed2a6abf7158809cf4f3c";
	const char *pt1 = "6bc1bee22e409f96e93d7e117393172a";
	const char *pt2 = "ae2d8a571e03ac9c9eb76fac45af8e51";
	const char *pt3 = "30c81c46a35ce411e5fbc1191a0a52ef";
	const char *pt4 = "f69f2445df4f9b17ad2b417be66c3710";
	res |= !test(key2, pt1, "3ad77bb40d7a3660a89ecaf32466ef97");
	res |= !test(key2, pt2, "f5d3d58503b9699de785895a96fdbaaf");
	res |= !test(key2, pt3, "43b1cd7f598ece23881b00e3ed030688");
	res |= !test(key2, pt4, "7b0c785e27e8ad3f8223207104725dd4");
	res <<= 1;
	const char *key3 = "8e73b0f7da0e6452c810f32b809079e562f8ead2522c6b7b";
	res |= !test(key3, pt1, "bd334f1d6e45f25ff712a214571fa5cc", 24);
	res |= !test(key3, pt2, "974104846d0ad3ad7734ecb3ecee4eef", 24);
	res |= !test(key3, pt3, "ef7afd2270e2e60adce0ba2face6444e", 24);
	res |= !test(key3, pt4, "9a4b41ba738d6c72fb16691603c18e0e", 24);
	res <<= 1;
	const char *key4 =
		"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4";
	res |= !test(key4, pt1, "f3eed1bdb5d2a03c064b5a7e3db181f8", 32);
	res |= !test(key4, pt2, "591ccb10d410ed26dc5ba74a31362870", 32);
	res |= !test(key4, pt3, "b6ed21b99ca6f4f9f153e7b1beafed1d", 32);
	res |= !test(key4, pt4, "23304b7a39f9f3ff067d8d8f9e24ecc7", 32);
	res <<= 1;

	const char *key5 =
		"2b7e151628aed2a6abf7158809cf4f3c762e7160f38b4da56a784d9045190cfe";
	const char *blk = 
		"3243f6a8885a308d313198a2e03707344a4093822299f31d0082efa98ec4e6c8";
	res |= !test(key5, blk, "3925841d02dc09fbdc118597196a0b32", 16, 16);
	res |= !test(key5, blk, "231d844639b31b412211cfe93712b880", 20, 16);
	res |= !test(key5, blk, "f9fb29aefc384a250340d833b87ebc00", 24, 16);
	res |= !test(key5, blk, "8faa8fe4dee9eb17caa4797502fc9d3f", 28, 16);
	res |= !test(key5, blk, "1a6e6c2c662e7da6501ffb62bc9e93f3", 32, 16);
	res <<= 1;

	res |= !test(key5, blk, "16e73aec921314c29df905432bc8968ab64b1f51", 16, 20);
	res |= !test(key5, blk, "0553eb691670dd8a5a5b5addf1aa7450f7a0e587", 20, 20);
	res |= !test(key5, blk, "73cd6f3423036790463aa9e19cfcde894ea16623", 24, 20);
	res |= !test(key5, blk, "601b5dcd1cf4ece954c740445340bf0afdc048df", 28, 20);
	res |= !test(key5, blk, "579e930b36c1529aa3e86628bacfe146942882cf", 32, 20);
	res <<= 1;

	res |= !test(key5, blk, "b24d275489e82bb8f7375e0d5fcdb1f481757c538b65148a",
			16, 24);
	res |= !test(key5, blk, "738dae25620d3d3beff4a037a04290d73eb33521a63ea568",
			20, 24);
	res |= !test(key5, blk, "725ae43b5f3161de806a7c93e0bca93c967ec1ae1b71e1cf",
			24, 24);
	res |= !test(key5, blk, "bbfc14180afbf6a36382a061843f0b63e769acdc98769130",
			28, 24);
	res |= !test(key5, blk, "0ebacf199e3315c2e34b24fcc7c46ef4388aa475d66c194c",
			32, 24);
	res <<= 1;

	res |= !test(key5, blk,
			"b0a8f78f6b3c66213f792ffd2a61631f79331407a5e5c8d3793aceb1", 16, 28);
	res |= !test(key5, blk,
			"08b99944edfce33a2acb131183ab0168446b2d15e958480010f545e3", 20, 28);
	res |= !test(key5, blk,
			"be4c597d8f7efe22a2f7e5b1938e2564d452a5bfe72399c7af1101e2", 24, 28);
	res |= !test(key5, blk,
			"ef529598ecbce297811b49bbed2c33bbe1241d6e1a833dbe119569e8", 28, 28);
	res |= !test(key5, blk,
			"02fafc200176ed05deb8edb82a3555b0b10d47a388dfd59cab2f6c11", 32, 28);
	res <<= 1;

	res |= !test(key5, blk,
			"7d15479076b69a46ffb3b3beae97ad8313f622f67fedb487de9f06b9ed9c8f19",
			16, 32);
	res |= !test(key5, blk,
			"514f93fb296b5ad16aa7df8b577abcbd484decacccc7fb1f18dc567309ceeffd",
			20, 32);
	res |= !test(key5, blk,
			"5d7101727bb25781bf6715b0e6955282b9610e23a43c2eb062699f0ebf5887b2",
			24, 32);
	res |= !test(key5, blk,
			"d56c5a63627432579e1dd308b2c8f157b40a4bfb56fea1377b25d3ed3d6dbf80",
			28, 32);
	res |= !test(key5, blk,
			"a49406115dfb30a40418aafa4869b7c6a886ff31602a7dd19c889dc64f7e4e7a",
			32, 32);

	return res;
}

static int rijndaeltest(void *p, const drew_loader_t *ldr)
{
	return rd_test(p, ldr);
}

static int rijndael160test(void *p, const drew_loader_t *ldr)
{
	return rd_test(p, ldr);
}

static int rijndael192test(void *p, const drew_loader_t *ldr)
{
	return rd_test(p, ldr);
}

static int rijndael224test(void *p, const drew_loader_t *ldr)
{
	return rd_test(p, ldr);
}

static int rijndael256test(void *p, const drew_loader_t *ldr)
{
	return rd_test(p, ldr);
}

static int aes128test(void *p, const drew_loader_t *ldr)
{
	return rd_test(p, ldr);
}

static int aes192test(void *p, const drew_loader_t *ldr)
{
	return rd_test(p, ldr);
}

static int aes256test(void *p, const drew_loader_t *ldr)
{
	return rd_test(p, ldr);
}

	PLUGIN_STRUCTURE(rijndael, Rijndael128)
	PLUGIN_STRUCTURE(rijndael160, Rijndael160)
	PLUGIN_STRUCTURE(rijndael192, Rijndael192)
	PLUGIN_STRUCTURE(rijndael224, Rijndael224)
	PLUGIN_STRUCTURE(rijndael256, Rijndael256)
	PLUGIN_STRUCTURE(aes128, Rijndael128)
	PLUGIN_STRUCTURE(aes192, Rijndael128)
	PLUGIN_STRUCTURE(aes256, Rijndael128)
	PLUGIN_DATA_START()
	PLUGIN_DATA(rijndael, "Rijndael")
	PLUGIN_DATA(rijndael160, "Rijndael-160")
	PLUGIN_DATA(rijndael192, "Rijndael-192")
	PLUGIN_DATA(rijndael224, "Rijndael-224")
	PLUGIN_DATA(rijndael256, "Rijndael-256")
	PLUGIN_DATA(aes128, "AES128")
	PLUGIN_DATA(aes192, "AES192")
	PLUGIN_DATA(aes256, "AES256")
	PLUGIN_DATA_END()
	PLUGIN_INTERFACE(rijndael)
}

typedef BigEndian E;

drew::Rijndael::Rijndael()
{
}

#define MAXNK 8

template<unsigned N>
const size_t drew::GenericRijndael<N>::m_nb = N / 32;

template<unsigned N>
const size_t drew::GenericRijndael<N>::m_bc = N / 4;

template<unsigned N>
const uint64_t drew::GenericRijndael<N>::m_bcmask =
	(((uint64_t(1) << (drew::GenericRijndael<N>::m_bc-1))-1)<<1)|1;

template<unsigned N>
const size_t drew::GenericRijndael<N>::shiftoffset = (drew::GenericRijndael<N>::m_nb-4);

template<unsigned N>
int drew::GenericRijndael<N>::SetKeyInternal(const uint8_t *key, size_t len)
{
	m_nk = (len / 4);
	m_nr = 6 + std::max(m_nb, m_nk);

	uint8_t tk[4][MAXNK];

	for (size_t i = 0; i < len; i++) {
	    tk[i % 4][i / 4] = key[i];
	}

	size_t t = 0;

	memset(m_rk, 0, sizeof(m_rk));

	for (size_t j = 0; (j < m_nk) && (t < (m_nr+1)*m_nb); j++, t++) {
		for (size_t i = 0; i < 4; i++) {
			m_rk[t / m_nb][i] |=
				uint64_t(tk[i][j]) << ((t * 8) % m_bc); 
		}
	}

	int ri = 0;

	while (t < (m_nr+1)*m_nb) {
		for (size_t i = 0; i < 4; i++)
			tk[i][0] ^= S[tk[(i+1)%4][m_nk-1]];
		tk[0][0] ^= rcon[ri++];

		if (m_nk <= 6)
			for (size_t j = 1; j < m_nk; j++)
				for (size_t i = 0; i < 4; i++)
					tk[i][j] ^= tk[i][j-1];
		else {
			for (size_t j = 1; j < 4; j++)
				for (int i = 0; i < 4; i++)
					tk[i][j] ^= tk[i][j-1];
			for (size_t i = 0; i < 4; i++)
				tk[i][4] ^= S[tk[i][3]];
			for (size_t j = 5; j < m_nk; j++)
				for (size_t i = 0; i < 4; i++)
					tk[i][j] ^= tk[i][j-1];
		}
		for (size_t j = 0; (j < m_nk) && (t < (m_nr+1)*m_nb); j++, t++) {
			for (size_t i = 0; i < 4; i++) {
				m_rk[t / m_nb][i] |= 
					uint64_t(tk[i][j]) << ((t * 8) % (m_bc));
			}
		}
	}

	const size_t rksz = sizeof(uint64_t) * 4;
	uint8_t *rk = m_rkb;
	for (size_t i = 0; i < m_nr+1; i++, rk += rksz)
		E::Copy(rk, m_rk[i], rksz);

	return 0;
}

template<unsigned N>
int drew::GenericRijndael<N>::Encrypt(uint8_t *out, const uint8_t *in) const
{
	memcpy(out, in, block_size);
	EncryptBlock(out);
	return 0;
}

int drew::Rijndael::Decrypt(uint8_t *out, const uint8_t *in) const
{
	uint64_t state[4];
	memset(state, 0, sizeof(state));

	UnpackBlock(state, in);
	DecryptBlock(state);
	PackBlock(out, state);
	return 0;
}

const uint8_t drew::Rijndael::shifts0[5][4] = {
   { 0, 8, 16, 24 },
   { 0, 8, 16, 24 },
   { 0, 8, 16, 24 },
   { 0, 8, 16, 32 },
   { 0, 8, 24, 32 }
};

const uint8_t drew::Rijndael::shifts1[5][4] = {
   { 0, 24, 16, 8 },
   { 0, 32, 24, 16 },
   { 0, 40, 32, 24 },
   { 0, 48, 40, 24 },
   { 0, 56, 40, 32 }
};


void drew::Rijndael::KeyAddition(uint64_t *state, const uint64_t *rk) const
{
	state[0] ^= rk[0];
	state[1] ^= rk[1];
	state[2] ^= rk[2];
	state[3] ^= rk[3];
}

template<unsigned N>
void drew::GenericRijndael<N>::ShiftRow(uint64_t *state, const uint8_t *shifts)
	const
{
	state[1] = shift(state[1], shifts[1]);
	state[2] = shift(state[2], shifts[2]);
	state[3] = shift(state[3], shifts[3]);
}

void drew::Rijndael::Substitution(uint64_t *state, const uint8_t *box) const
{
	state[0] = ApplyS(state[0], box);
	state[1] = ApplyS(state[1], box);
	state[2] = ApplyS(state[2], box);
	state[3] = ApplyS(state[3], box);
}

template<unsigned N>
uint64_t drew::GenericRijndael<N>::ApplyS(uint64_t r, const uint8_t *box) const
{
	uint64_t res = 0;

	for (int i = 7; i >= 0; i--) {
		res <<= 8;
		res |= uint64_t(box[E::GetByte(r, i)]);
	}
	res &= m_bcmask;

	return res;
}

template<unsigned N>
void drew::GenericRijndael<N>::InvMixColumn(uint64_t *state) const
{
	uint64_t r0 = 0, r1 = 0, r2 = 0, r3 = 0;

	for (size_t i = 0; i < m_bc; i += 8)
	{
		uint8_t a0 = uint8_t(state[0] >> i);
		uint8_t a1 = uint8_t(state[1] >> i);
		uint8_t a2 = uint8_t(state[2] >> i);
		uint8_t a3 = uint8_t(state[3] >> i);

		r0 |= uint64_t(multe[a0] ^ multb[a1] ^ multd[a2] ^ mult9[a3]) << i;
		r1 |= uint64_t(multe[a1] ^ multb[a2] ^ multd[a3] ^ mult9[a0]) << i;
		r2 |= uint64_t(multe[a2] ^ multb[a3] ^ multd[a0] ^ mult9[a1]) << i;
		r3 |= uint64_t(multe[a3] ^ multb[a0] ^ multd[a1] ^ mult9[a2]) << i;
	}

	state[0] = r0;
	state[1] = r1;
	state[2] = r2;
	state[3] = r3;
}

#define R128R(i, e, f, g, h, w, x, y, z) \
do { \
	uint8_t a, b, c, d; \
	uint32_t t; \
	a = box[buf[e] ^ rk[w]]; \
	b = box[buf[f] ^ rk[x]]; \
	c = box[buf[g] ^ rk[y]]; \
	d = box[buf[h] ^ rk[z]]; \
	t = Et0[a] ^ Et1[b] ^ Et2[c] ^ Et3[d]; \
	obuf[i+0] = E::GetByte(t, 0); \
	obuf[i+1] = E::GetByte(t, 1); \
	obuf[i+2] = E::GetByte(t, 2); \
	obuf[i+3] = E::GetByte(t, 3); \
} while (0)

void drew::Rijndael128::Round(uint8_t *obuf, const uint8_t *buf,
		const uint8_t *rk, const uint8_t *box) const
{
	R128R(0,   0,  5, 10, 15,  7, 14, 21, 28);
	R128R(4,   4,  9, 14,  3,  6, 13, 20, 31);
	R128R(8,   8, 13,  2,  7,  5, 12, 23, 30);
	R128R(12, 12,  1,  6, 11,  4, 15, 22, 29);
}

void drew::Rijndael160::Round(uint8_t *obuf, const uint8_t *buf,
		const uint8_t *rk, const uint8_t *box) const
{
	R128R( 0,  0,  5, 10, 15,  7, 14, 21, 28);
	R128R( 4,  4,  9, 14, 19,  6, 13, 20, 27);
	R128R( 8,  8, 13, 18,  3,  5, 12, 19, 31);
	R128R(12, 12, 17,  2,  7,  4, 11, 23, 30);
	R128R(16, 16,  1,  6, 11,  3, 15, 22, 29);
}

void drew::Rijndael192::Round(uint8_t *obuf, const uint8_t *buf,
		const uint8_t *rk, const uint8_t *box) const
{
	R128R( 0,  0,  5, 10, 15,  7, 14, 21, 28);
	R128R( 4,  4,  9, 14, 19,  6, 13, 20, 27);
	R128R( 8,  8, 13, 18, 23,  5, 12, 19, 26);
	R128R(12, 12, 17, 22,  3,  4, 11, 18, 31);
	R128R(16, 16, 21,  2,  7,  3, 10, 23, 30);
	R128R(20, 20,  1,  6, 11,  2, 15, 22, 29);
}

void drew::Rijndael224::Round(uint8_t *obuf, const uint8_t *buf,
		const uint8_t *rk, const uint8_t *box) const
{
	R128R( 0,  0,  5, 10, 19,  7, 14, 21, 27);
	R128R( 4,  4,  9, 14, 23,  6, 13, 20, 26);
	R128R( 8,  8, 13, 18, 27,  5, 12, 19, 25);
	R128R(12, 12, 17, 22,  3,  4, 11, 18, 31);
	R128R(16, 16, 21, 26,  7,  3, 10, 17, 30);
	R128R(20, 20, 25,  2, 11,  2,  9, 23, 29);
	R128R(24, 24,  1,  6, 15,  1, 15, 22, 28);
}

void drew::Rijndael256::Round(uint8_t *obuf, const uint8_t *buf,
		const uint8_t *rk, const uint8_t *box) const
{
	R128R( 0,  0,  5, 14, 19,  7, 14, 20, 27);
	R128R( 4,  4,  9, 18, 23,  6, 13, 19, 26);
	R128R( 8,  8, 13, 22, 27,  5, 12, 18, 25);
	R128R(12, 12, 17, 26, 31,  4, 11, 17, 24);
	R128R(16, 16, 21, 30,  3,  3, 10, 16, 31);
	R128R(20, 20, 25,  2,  7,  2,  9, 23, 30);
	R128R(24, 24, 29,  6, 11,  1,  8, 22, 29);
	R128R(28, 28,  1, 10, 15,  0, 15, 21, 28);
}

#define R128F(x, z, y, w) obuf[x] = box[buf[y] ^ rk[w]] ^ rk[z+32]

void drew::Rijndael128::Final(uint8_t *obuf, uint8_t *buf, const uint8_t *rk,
		const uint8_t *box) const
{
	R128F(12,  4, 12,  4);
	R128F(13, 12,  1, 15);
	R128F(14, 20,  6, 22);
	R128F(15, 28, 11, 29);

	R128F( 8,  5,  8,  5);
	R128F( 9, 13, 13, 12);
	R128F(10, 21,  2, 23);
	R128F(11, 29,  7, 30);

	R128F( 4,  6,  4,  6);
	R128F( 5, 14,  9, 13);
	R128F( 6, 22, 14, 20);
	R128F( 7, 30,  3, 31);

	R128F( 0,  7,  0,  7);
	R128F( 1, 15,  5, 14);
	R128F( 2, 23, 10, 21);
	R128F( 3, 31, 15, 28);
}

void drew::Rijndael160::Final(uint8_t *obuf, uint8_t *buf, const uint8_t *rk,
		const uint8_t *box) const
{
	R128F( 0,  7,  0,  7);
	R128F( 1, 15,  5, 14);
	R128F( 2, 23, 10, 21);
	R128F( 3, 31, 15, 28);

	R128F( 4,  6,  4,  6);
	R128F( 5, 14,  9, 13);
	R128F( 6, 22, 14, 20);
	R128F( 7, 30, 19, 27);

	R128F( 8,  5,  8,  5);
	R128F( 9, 13, 13, 12);
	R128F(10, 21, 18, 19);
	R128F(11, 29,  3, 31);

	R128F(12,  4, 12,  4);
	R128F(13, 12, 17, 11);
	R128F(14, 20,  2, 23);
	R128F(15, 28,  7, 30);

	R128F(16,  3, 16,  3);
	R128F(17, 11,  1, 15);
	R128F(18, 19,  6, 22);
	R128F(19, 27, 11, 29);
}

void drew::Rijndael192::Final(uint8_t *obuf, uint8_t *buf, const uint8_t *rk,
		const uint8_t *box) const
{
	R128F( 0,  7,  0,  7);
	R128F( 1, 15,  5, 14);
	R128F( 2, 23, 10, 21);
	R128F( 3, 31, 15, 28);

	R128F( 4,  6,  4,  6);
	R128F( 5, 14,  9, 13);
	R128F( 6, 22, 14, 20);
	R128F( 7, 30, 19, 27);

	R128F( 8,  5,  8,  5);
	R128F( 9, 13, 13, 12);
	R128F(10, 21, 18, 19);
	R128F(11, 29, 23, 26);

	R128F(12,  4, 12,  4);
	R128F(13, 12, 17, 11);
	R128F(14, 20, 22, 18);
	R128F(15, 28,  3, 31);

	R128F(16,  3, 16,  3);
	R128F(17, 11, 21, 10);
	R128F(18, 19,  2, 23);
	R128F(19, 27,  7, 30);

	R128F(20,  2, 20,  2);
	R128F(21, 10,  1, 15);
	R128F(22, 18,  6, 22);
	R128F(23, 26, 11, 29);
}

void drew::Rijndael224::Final(uint8_t *obuf, uint8_t *buf, const uint8_t *rk,
		const uint8_t *box) const
{
	R128F( 0,  7,  0,  7);
	R128F( 1, 15,  5, 14);
	R128F( 2, 23, 10, 21);
	R128F( 3, 31, 19, 27);

	R128F( 4,  6,  4,  6);
	R128F( 5, 14,  9, 13);
	R128F( 6, 22, 14, 20);
	R128F( 7, 30, 23, 26);

	R128F( 8,  5,  8,  5);
	R128F( 9, 13, 13, 12);
	R128F(10, 21, 18, 19);
	R128F(11, 29, 27, 25);

	R128F(12,  4, 12,  4);
	R128F(13, 12, 17, 11);
	R128F(14, 20, 22, 18);
	R128F(15, 28,  3, 31);

	R128F(16,  3, 16,  3);
	R128F(17, 11, 21, 10);
	R128F(18, 19, 26, 17);
	R128F(19, 27,  7, 30);

	R128F(20,  2, 20,  2);
	R128F(21, 10, 25,  9);
	R128F(22, 18,  2, 23);
	R128F(23, 26, 11, 29);

	R128F(24,  1, 24,  1);
	R128F(25,  9,  1, 15);
	R128F(26, 17,  6, 22);
	R128F(27, 25, 15, 28);
}

void drew::Rijndael256::Final(uint8_t *obuf, uint8_t *buf, const uint8_t *rk,
		const uint8_t *box) const
{
	R128F( 0,  7,  0,  7);
	R128F( 1, 15,  5, 14);
	R128F( 2, 23, 14, 20);
	R128F( 3, 31, 19, 27);

	R128F( 4,  6,  4,  6);
	R128F( 5, 14,  9, 13);
	R128F( 6, 22, 18, 19);
	R128F( 7, 30, 23, 26);

	R128F( 8,  5,  8,  5);
	R128F( 9, 13, 13, 12);
	R128F(10, 21, 22, 18);
	R128F(11, 29, 27, 25);

	R128F(12,  4, 12,  4);
	R128F(13, 12, 17, 11);
	R128F(14, 20, 26, 17);
	R128F(15, 28, 31, 24);

	R128F(16,  3, 16,  3);
	R128F(17, 11, 21, 10);
	R128F(18, 19, 30, 16);
	R128F(19, 27,  3, 31);

	R128F(20,  2, 20,  2);
	R128F(21, 10, 25,  9);
	R128F(22, 18,  2, 23);
	R128F(23, 26,  7, 30);

	R128F(24,  1, 24,  1);
	R128F(25,  9, 29,  8);
	R128F(26, 17,  6, 22);
	R128F(27, 25, 11, 29);

	R128F(28,  0, 28,  0);
	R128F(29,  8,  1, 15);
	R128F(30, 16, 10, 21);
	R128F(31, 24, 15, 28);
}

template<unsigned N>
void drew::GenericRijndael<N>::EncryptBlock(uint8_t *state) const
{
	const size_t rksz = sizeof(uint64_t) * 4;
	uint8_t buf[sizeof(uint64_t) * 4];
	const uint8_t *rk = m_rkb;
	uint8_t *p = state, *q = buf;

	for (size_t i = 0; i < m_nr-1; i++, rk += rksz) {
		this->Round(q, p, rk, S);
		std::swap(p, q);
	}

	this->Final(q, p, rk, S);
	if (q != state)
		memcpy(state, q, block_size);
}

void drew::Rijndael::DecryptBlock(uint64_t *state) const
{
	KeyAddition(state, m_rk[m_nr]);
	Substitution(state, Si);
	ShiftRow(state, m_sh1);

	for (size_t i = m_nr-1; i > 0; i--) {
		KeyAddition(state, m_rk[i]);
		InvMixColumn(state);
		Substitution(state, Si);
		ShiftRow(state, m_sh1);
	}

	KeyAddition(state, m_rk[0]);
}

template<unsigned N>
void drew::GenericRijndael<N>::PackBlock(uint8_t *blk, const uint64_t *state)
	const
{
	for (size_t j = 0; j != m_bc; j += 8) {
		*blk++ = state[0] >> j;
		*blk++ = state[1] >> j;
		*blk++ = state[2] >> j;
		*blk++ = state[3] >> j;
	}
}

template<unsigned N>
void drew::GenericRijndael<N>::UnpackBlock(uint64_t *state, const uint8_t *blk)
	const
{
	state[0] = *blk++;
	state[1] = *blk++;
	state[2] = *blk++;
	state[3] = *blk++;

	for (size_t j = 8; j != m_bc; j += 8) {
		state[0] |= uint64_t(*blk++) << j;
		state[1] |= uint64_t(*blk++) << j;
		state[2] |= uint64_t(*blk++) << j;
		state[3] |= uint64_t(*blk++) << j;
	}
}

const uint8_t drew::Rijndael::mult2[] = {
	0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 
	0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 
	0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 
	0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 
	0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 
	0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 
	0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 
	0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 
	0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 
	0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 
	0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 
	0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 
	0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 
	0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 
	0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 
	0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 
	0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 
	0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 
	0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 
	0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 
	0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 
	0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 
	0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 
	0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 
	0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 
	0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 
	0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 
	0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 
	0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 
	0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 
	0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 
	0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5, 
};

const uint8_t drew::Rijndael::mult3[] = {
	0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 
	0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11, 
	0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 
	0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21, 
	0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 
	0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71, 
	0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 
	0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41, 
	0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 
	0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 
	0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 
	0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1, 
	0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 
	0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1, 
	0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 
	0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81, 
	0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 
	0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a, 
	0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 
	0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba, 
	0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 
	0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea, 
	0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 
	0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda, 
	0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 
	0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a, 
	0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 
	0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 
	0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 
	0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a, 
	0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 
	0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a, 
};

const uint8_t drew::Rijndael::mult9[] = {
	0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 
	0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77, 
	0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 
	0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7, 
	0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 
	0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c, 
	0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 
	0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc, 
	0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 
	0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01, 
	0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 
	0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91, 
	0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 
	0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a, 
	0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 
	0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa, 
	0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 
	0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b, 
	0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 
	0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b, 
	0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 
	0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0, 
	0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 
	0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30, 
	0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 
	0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed, 
	0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 
	0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d, 
	0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 
	0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6, 
	0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 
	0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46, 
};

const uint8_t drew::Rijndael::multb[] = {
	0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 
	0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69, 
	0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 
	0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9, 
	0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 
	0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12, 
	0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 
	0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2, 
	0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 
	0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f, 
	0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 
	0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f, 
	0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 
	0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4, 
	0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 
	0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54, 
	0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 
	0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e, 
	0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 
	0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e, 
	0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 
	0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5, 
	0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 
	0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55, 
	0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 
	0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68, 
	0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 
	0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8, 
	0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 
	0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13, 
	0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 
	0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3, 
};

const uint8_t drew::Rijndael::multd[] = {
	0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 
	0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b, 
	0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 
	0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b, 
	0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 
	0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0, 
	0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 
	0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20, 
	0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 
	0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26, 
	0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 
	0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6, 
	0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 
	0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d, 
	0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 
	0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d, 
	0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 
	0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91, 
	0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 
	0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41, 
	0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 
	0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a, 
	0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 
	0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa, 
	0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 
	0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc, 
	0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 
	0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c, 
	0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 
	0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47, 
	0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 
	0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97, 
};

const uint8_t drew::Rijndael::multe[] = {
	0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 
	0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a, 
	0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 
	0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba, 
	0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 
	0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81, 
	0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 
	0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61, 
	0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 
	0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7, 
	0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 
	0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17, 
	0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 
	0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c, 
	0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 
	0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc, 
	0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 
	0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b, 
	0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 
	0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb, 
	0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 
	0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0, 
	0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 
	0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20, 
	0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 
	0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6, 
	0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 
	0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56, 
	0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 
	0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d, 
	0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 
	0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d, 
};

const uint8_t drew::Rijndael::S[] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
};

const uint8_t drew::Rijndael::Si[] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
};

const uint8_t drew::Rijndael::rcon[] = {
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91
};

const uint32_t drew::Rijndael::Et0[] = {
	0x00000000, 0x03010102, 0x06020204, 0x05030306, 
	0x0c040408, 0x0f05050a, 0x0a06060c, 0x0907070e, 
	0x18080810, 0x1b090912, 0x1e0a0a14, 0x1d0b0b16, 
	0x140c0c18, 0x170d0d1a, 0x120e0e1c, 0x110f0f1e, 
	0x30101020, 0x33111122, 0x36121224, 0x35131326, 
	0x3c141428, 0x3f15152a, 0x3a16162c, 0x3917172e, 
	0x28181830, 0x2b191932, 0x2e1a1a34, 0x2d1b1b36, 
	0x241c1c38, 0x271d1d3a, 0x221e1e3c, 0x211f1f3e, 
	0x60202040, 0x63212142, 0x66222244, 0x65232346, 
	0x6c242448, 0x6f25254a, 0x6a26264c, 0x6927274e, 
	0x78282850, 0x7b292952, 0x7e2a2a54, 0x7d2b2b56, 
	0x742c2c58, 0x772d2d5a, 0x722e2e5c, 0x712f2f5e, 
	0x50303060, 0x53313162, 0x56323264, 0x55333366, 
	0x5c343468, 0x5f35356a, 0x5a36366c, 0x5937376e, 
	0x48383870, 0x4b393972, 0x4e3a3a74, 0x4d3b3b76, 
	0x443c3c78, 0x473d3d7a, 0x423e3e7c, 0x413f3f7e, 
	0xc0404080, 0xc3414182, 0xc6424284, 0xc5434386, 
	0xcc444488, 0xcf45458a, 0xca46468c, 0xc947478e, 
	0xd8484890, 0xdb494992, 0xde4a4a94, 0xdd4b4b96, 
	0xd44c4c98, 0xd74d4d9a, 0xd24e4e9c, 0xd14f4f9e, 
	0xf05050a0, 0xf35151a2, 0xf65252a4, 0xf55353a6, 
	0xfc5454a8, 0xff5555aa, 0xfa5656ac, 0xf95757ae, 
	0xe85858b0, 0xeb5959b2, 0xee5a5ab4, 0xed5b5bb6, 
	0xe45c5cb8, 0xe75d5dba, 0xe25e5ebc, 0xe15f5fbe, 
	0xa06060c0, 0xa36161c2, 0xa66262c4, 0xa56363c6, 
	0xac6464c8, 0xaf6565ca, 0xaa6666cc, 0xa96767ce, 
	0xb86868d0, 0xbb6969d2, 0xbe6a6ad4, 0xbd6b6bd6, 
	0xb46c6cd8, 0xb76d6dda, 0xb26e6edc, 0xb16f6fde, 
	0x907070e0, 0x937171e2, 0x967272e4, 0x957373e6, 
	0x9c7474e8, 0x9f7575ea, 0x9a7676ec, 0x997777ee, 
	0x887878f0, 0x8b7979f2, 0x8e7a7af4, 0x8d7b7bf6, 
	0x847c7cf8, 0x877d7dfa, 0x827e7efc, 0x817f7ffe, 
	0x9b80801b, 0x98818119, 0x9d82821f, 0x9e83831d, 
	0x97848413, 0x94858511, 0x91868617, 0x92878715, 
	0x8388880b, 0x80898909, 0x858a8a0f, 0x868b8b0d, 
	0x8f8c8c03, 0x8c8d8d01, 0x898e8e07, 0x8a8f8f05, 
	0xab90903b, 0xa8919139, 0xad92923f, 0xae93933d, 
	0xa7949433, 0xa4959531, 0xa1969637, 0xa2979735, 
	0xb398982b, 0xb0999929, 0xb59a9a2f, 0xb69b9b2d, 
	0xbf9c9c23, 0xbc9d9d21, 0xb99e9e27, 0xba9f9f25, 
	0xfba0a05b, 0xf8a1a159, 0xfda2a25f, 0xfea3a35d, 
	0xf7a4a453, 0xf4a5a551, 0xf1a6a657, 0xf2a7a755, 
	0xe3a8a84b, 0xe0a9a949, 0xe5aaaa4f, 0xe6abab4d, 
	0xefacac43, 0xecadad41, 0xe9aeae47, 0xeaafaf45, 
	0xcbb0b07b, 0xc8b1b179, 0xcdb2b27f, 0xceb3b37d, 
	0xc7b4b473, 0xc4b5b571, 0xc1b6b677, 0xc2b7b775, 
	0xd3b8b86b, 0xd0b9b969, 0xd5baba6f, 0xd6bbbb6d, 
	0xdfbcbc63, 0xdcbdbd61, 0xd9bebe67, 0xdabfbf65, 
	0x5bc0c09b, 0x58c1c199, 0x5dc2c29f, 0x5ec3c39d, 
	0x57c4c493, 0x54c5c591, 0x51c6c697, 0x52c7c795, 
	0x43c8c88b, 0x40c9c989, 0x45caca8f, 0x46cbcb8d, 
	0x4fcccc83, 0x4ccdcd81, 0x49cece87, 0x4acfcf85, 
	0x6bd0d0bb, 0x68d1d1b9, 0x6dd2d2bf, 0x6ed3d3bd, 
	0x67d4d4b3, 0x64d5d5b1, 0x61d6d6b7, 0x62d7d7b5, 
	0x73d8d8ab, 0x70d9d9a9, 0x75dadaaf, 0x76dbdbad, 
	0x7fdcdca3, 0x7cdddda1, 0x79dedea7, 0x7adfdfa5, 
	0x3be0e0db, 0x38e1e1d9, 0x3de2e2df, 0x3ee3e3dd, 
	0x37e4e4d3, 0x34e5e5d1, 0x31e6e6d7, 0x32e7e7d5, 
	0x23e8e8cb, 0x20e9e9c9, 0x25eaeacf, 0x26ebebcd, 
	0x2fececc3, 0x2cededc1, 0x29eeeec7, 0x2aefefc5, 
	0x0bf0f0fb, 0x08f1f1f9, 0x0df2f2ff, 0x0ef3f3fd, 
	0x07f4f4f3, 0x04f5f5f1, 0x01f6f6f7, 0x02f7f7f5, 
	0x13f8f8eb, 0x10f9f9e9, 0x15fafaef, 0x16fbfbed, 
	0x1ffcfce3, 0x1cfdfde1, 0x19fefee7, 0x1affffe5, 
};

const uint32_t drew::Rijndael::Et1[] = {
	0x00000000, 0x01010203, 0x02020406, 0x03030605, 
	0x0404080c, 0x05050a0f, 0x06060c0a, 0x07070e09, 
	0x08081018, 0x0909121b, 0x0a0a141e, 0x0b0b161d, 
	0x0c0c1814, 0x0d0d1a17, 0x0e0e1c12, 0x0f0f1e11, 
	0x10102030, 0x11112233, 0x12122436, 0x13132635, 
	0x1414283c, 0x15152a3f, 0x16162c3a, 0x17172e39, 
	0x18183028, 0x1919322b, 0x1a1a342e, 0x1b1b362d, 
	0x1c1c3824, 0x1d1d3a27, 0x1e1e3c22, 0x1f1f3e21, 
	0x20204060, 0x21214263, 0x22224466, 0x23234665, 
	0x2424486c, 0x25254a6f, 0x26264c6a, 0x27274e69, 
	0x28285078, 0x2929527b, 0x2a2a547e, 0x2b2b567d, 
	0x2c2c5874, 0x2d2d5a77, 0x2e2e5c72, 0x2f2f5e71, 
	0x30306050, 0x31316253, 0x32326456, 0x33336655, 
	0x3434685c, 0x35356a5f, 0x36366c5a, 0x37376e59, 
	0x38387048, 0x3939724b, 0x3a3a744e, 0x3b3b764d, 
	0x3c3c7844, 0x3d3d7a47, 0x3e3e7c42, 0x3f3f7e41, 
	0x404080c0, 0x414182c3, 0x424284c6, 0x434386c5, 
	0x444488cc, 0x45458acf, 0x46468cca, 0x47478ec9, 
	0x484890d8, 0x494992db, 0x4a4a94de, 0x4b4b96dd, 
	0x4c4c98d4, 0x4d4d9ad7, 0x4e4e9cd2, 0x4f4f9ed1, 
	0x5050a0f0, 0x5151a2f3, 0x5252a4f6, 0x5353a6f5, 
	0x5454a8fc, 0x5555aaff, 0x5656acfa, 0x5757aef9, 
	0x5858b0e8, 0x5959b2eb, 0x5a5ab4ee, 0x5b5bb6ed, 
	0x5c5cb8e4, 0x5d5dbae7, 0x5e5ebce2, 0x5f5fbee1, 
	0x6060c0a0, 0x6161c2a3, 0x6262c4a6, 0x6363c6a5, 
	0x6464c8ac, 0x6565caaf, 0x6666ccaa, 0x6767cea9, 
	0x6868d0b8, 0x6969d2bb, 0x6a6ad4be, 0x6b6bd6bd, 
	0x6c6cd8b4, 0x6d6ddab7, 0x6e6edcb2, 0x6f6fdeb1, 
	0x7070e090, 0x7171e293, 0x7272e496, 0x7373e695, 
	0x7474e89c, 0x7575ea9f, 0x7676ec9a, 0x7777ee99, 
	0x7878f088, 0x7979f28b, 0x7a7af48e, 0x7b7bf68d, 
	0x7c7cf884, 0x7d7dfa87, 0x7e7efc82, 0x7f7ffe81, 
	0x80801b9b, 0x81811998, 0x82821f9d, 0x83831d9e, 
	0x84841397, 0x85851194, 0x86861791, 0x87871592, 
	0x88880b83, 0x89890980, 0x8a8a0f85, 0x8b8b0d86, 
	0x8c8c038f, 0x8d8d018c, 0x8e8e0789, 0x8f8f058a, 
	0x90903bab, 0x919139a8, 0x92923fad, 0x93933dae, 
	0x949433a7, 0x959531a4, 0x969637a1, 0x979735a2, 
	0x98982bb3, 0x999929b0, 0x9a9a2fb5, 0x9b9b2db6, 
	0x9c9c23bf, 0x9d9d21bc, 0x9e9e27b9, 0x9f9f25ba, 
	0xa0a05bfb, 0xa1a159f8, 0xa2a25ffd, 0xa3a35dfe, 
	0xa4a453f7, 0xa5a551f4, 0xa6a657f1, 0xa7a755f2, 
	0xa8a84be3, 0xa9a949e0, 0xaaaa4fe5, 0xabab4de6, 
	0xacac43ef, 0xadad41ec, 0xaeae47e9, 0xafaf45ea, 
	0xb0b07bcb, 0xb1b179c8, 0xb2b27fcd, 0xb3b37dce, 
	0xb4b473c7, 0xb5b571c4, 0xb6b677c1, 0xb7b775c2, 
	0xb8b86bd3, 0xb9b969d0, 0xbaba6fd5, 0xbbbb6dd6, 
	0xbcbc63df, 0xbdbd61dc, 0xbebe67d9, 0xbfbf65da, 
	0xc0c09b5b, 0xc1c19958, 0xc2c29f5d, 0xc3c39d5e, 
	0xc4c49357, 0xc5c59154, 0xc6c69751, 0xc7c79552, 
	0xc8c88b43, 0xc9c98940, 0xcaca8f45, 0xcbcb8d46, 
	0xcccc834f, 0xcdcd814c, 0xcece8749, 0xcfcf854a, 
	0xd0d0bb6b, 0xd1d1b968, 0xd2d2bf6d, 0xd3d3bd6e, 
	0xd4d4b367, 0xd5d5b164, 0xd6d6b761, 0xd7d7b562, 
	0xd8d8ab73, 0xd9d9a970, 0xdadaaf75, 0xdbdbad76, 
	0xdcdca37f, 0xdddda17c, 0xdedea779, 0xdfdfa57a, 
	0xe0e0db3b, 0xe1e1d938, 0xe2e2df3d, 0xe3e3dd3e, 
	0xe4e4d337, 0xe5e5d134, 0xe6e6d731, 0xe7e7d532, 
	0xe8e8cb23, 0xe9e9c920, 0xeaeacf25, 0xebebcd26, 
	0xececc32f, 0xededc12c, 0xeeeec729, 0xefefc52a, 
	0xf0f0fb0b, 0xf1f1f908, 0xf2f2ff0d, 0xf3f3fd0e, 
	0xf4f4f307, 0xf5f5f104, 0xf6f6f701, 0xf7f7f502, 
	0xf8f8eb13, 0xf9f9e910, 0xfafaef15, 0xfbfbed16, 
	0xfcfce31f, 0xfdfde11c, 0xfefee719, 0xffffe51a, 
};

const uint32_t drew::Rijndael::Et2[] = {
	0x00000000, 0x01020301, 0x02040602, 0x03060503, 
	0x04080c04, 0x050a0f05, 0x060c0a06, 0x070e0907, 
	0x08101808, 0x09121b09, 0x0a141e0a, 0x0b161d0b, 
	0x0c18140c, 0x0d1a170d, 0x0e1c120e, 0x0f1e110f, 
	0x10203010, 0x11223311, 0x12243612, 0x13263513, 
	0x14283c14, 0x152a3f15, 0x162c3a16, 0x172e3917, 
	0x18302818, 0x19322b19, 0x1a342e1a, 0x1b362d1b, 
	0x1c38241c, 0x1d3a271d, 0x1e3c221e, 0x1f3e211f, 
	0x20406020, 0x21426321, 0x22446622, 0x23466523, 
	0x24486c24, 0x254a6f25, 0x264c6a26, 0x274e6927, 
	0x28507828, 0x29527b29, 0x2a547e2a, 0x2b567d2b, 
	0x2c58742c, 0x2d5a772d, 0x2e5c722e, 0x2f5e712f, 
	0x30605030, 0x31625331, 0x32645632, 0x33665533, 
	0x34685c34, 0x356a5f35, 0x366c5a36, 0x376e5937, 
	0x38704838, 0x39724b39, 0x3a744e3a, 0x3b764d3b, 
	0x3c78443c, 0x3d7a473d, 0x3e7c423e, 0x3f7e413f, 
	0x4080c040, 0x4182c341, 0x4284c642, 0x4386c543, 
	0x4488cc44, 0x458acf45, 0x468cca46, 0x478ec947, 
	0x4890d848, 0x4992db49, 0x4a94de4a, 0x4b96dd4b, 
	0x4c98d44c, 0x4d9ad74d, 0x4e9cd24e, 0x4f9ed14f, 
	0x50a0f050, 0x51a2f351, 0x52a4f652, 0x53a6f553, 
	0x54a8fc54, 0x55aaff55, 0x56acfa56, 0x57aef957, 
	0x58b0e858, 0x59b2eb59, 0x5ab4ee5a, 0x5bb6ed5b, 
	0x5cb8e45c, 0x5dbae75d, 0x5ebce25e, 0x5fbee15f, 
	0x60c0a060, 0x61c2a361, 0x62c4a662, 0x63c6a563, 
	0x64c8ac64, 0x65caaf65, 0x66ccaa66, 0x67cea967, 
	0x68d0b868, 0x69d2bb69, 0x6ad4be6a, 0x6bd6bd6b, 
	0x6cd8b46c, 0x6ddab76d, 0x6edcb26e, 0x6fdeb16f, 
	0x70e09070, 0x71e29371, 0x72e49672, 0x73e69573, 
	0x74e89c74, 0x75ea9f75, 0x76ec9a76, 0x77ee9977, 
	0x78f08878, 0x79f28b79, 0x7af48e7a, 0x7bf68d7b, 
	0x7cf8847c, 0x7dfa877d, 0x7efc827e, 0x7ffe817f, 
	0x801b9b80, 0x81199881, 0x821f9d82, 0x831d9e83, 
	0x84139784, 0x85119485, 0x86179186, 0x87159287, 
	0x880b8388, 0x89098089, 0x8a0f858a, 0x8b0d868b, 
	0x8c038f8c, 0x8d018c8d, 0x8e07898e, 0x8f058a8f, 
	0x903bab90, 0x9139a891, 0x923fad92, 0x933dae93, 
	0x9433a794, 0x9531a495, 0x9637a196, 0x9735a297, 
	0x982bb398, 0x9929b099, 0x9a2fb59a, 0x9b2db69b, 
	0x9c23bf9c, 0x9d21bc9d, 0x9e27b99e, 0x9f25ba9f, 
	0xa05bfba0, 0xa159f8a1, 0xa25ffda2, 0xa35dfea3, 
	0xa453f7a4, 0xa551f4a5, 0xa657f1a6, 0xa755f2a7, 
	0xa84be3a8, 0xa949e0a9, 0xaa4fe5aa, 0xab4de6ab, 
	0xac43efac, 0xad41ecad, 0xae47e9ae, 0xaf45eaaf, 
	0xb07bcbb0, 0xb179c8b1, 0xb27fcdb2, 0xb37dceb3, 
	0xb473c7b4, 0xb571c4b5, 0xb677c1b6, 0xb775c2b7, 
	0xb86bd3b8, 0xb969d0b9, 0xba6fd5ba, 0xbb6dd6bb, 
	0xbc63dfbc, 0xbd61dcbd, 0xbe67d9be, 0xbf65dabf, 
	0xc09b5bc0, 0xc19958c1, 0xc29f5dc2, 0xc39d5ec3, 
	0xc49357c4, 0xc59154c5, 0xc69751c6, 0xc79552c7, 
	0xc88b43c8, 0xc98940c9, 0xca8f45ca, 0xcb8d46cb, 
	0xcc834fcc, 0xcd814ccd, 0xce8749ce, 0xcf854acf, 
	0xd0bb6bd0, 0xd1b968d1, 0xd2bf6dd2, 0xd3bd6ed3, 
	0xd4b367d4, 0xd5b164d5, 0xd6b761d6, 0xd7b562d7, 
	0xd8ab73d8, 0xd9a970d9, 0xdaaf75da, 0xdbad76db, 
	0xdca37fdc, 0xdda17cdd, 0xdea779de, 0xdfa57adf, 
	0xe0db3be0, 0xe1d938e1, 0xe2df3de2, 0xe3dd3ee3, 
	0xe4d337e4, 0xe5d134e5, 0xe6d731e6, 0xe7d532e7, 
	0xe8cb23e8, 0xe9c920e9, 0xeacf25ea, 0xebcd26eb, 
	0xecc32fec, 0xedc12ced, 0xeec729ee, 0xefc52aef, 
	0xf0fb0bf0, 0xf1f908f1, 0xf2ff0df2, 0xf3fd0ef3, 
	0xf4f307f4, 0xf5f104f5, 0xf6f701f6, 0xf7f502f7, 
	0xf8eb13f8, 0xf9e910f9, 0xfaef15fa, 0xfbed16fb, 
	0xfce31ffc, 0xfde11cfd, 0xfee719fe, 0xffe51aff, 
};

const uint32_t drew::Rijndael::Et3[] = {
	0x00000000, 0x02030101, 0x04060202, 0x06050303, 
	0x080c0404, 0x0a0f0505, 0x0c0a0606, 0x0e090707, 
	0x10180808, 0x121b0909, 0x141e0a0a, 0x161d0b0b, 
	0x18140c0c, 0x1a170d0d, 0x1c120e0e, 0x1e110f0f, 
	0x20301010, 0x22331111, 0x24361212, 0x26351313, 
	0x283c1414, 0x2a3f1515, 0x2c3a1616, 0x2e391717, 
	0x30281818, 0x322b1919, 0x342e1a1a, 0x362d1b1b, 
	0x38241c1c, 0x3a271d1d, 0x3c221e1e, 0x3e211f1f, 
	0x40602020, 0x42632121, 0x44662222, 0x46652323, 
	0x486c2424, 0x4a6f2525, 0x4c6a2626, 0x4e692727, 
	0x50782828, 0x527b2929, 0x547e2a2a, 0x567d2b2b, 
	0x58742c2c, 0x5a772d2d, 0x5c722e2e, 0x5e712f2f, 
	0x60503030, 0x62533131, 0x64563232, 0x66553333, 
	0x685c3434, 0x6a5f3535, 0x6c5a3636, 0x6e593737, 
	0x70483838, 0x724b3939, 0x744e3a3a, 0x764d3b3b, 
	0x78443c3c, 0x7a473d3d, 0x7c423e3e, 0x7e413f3f, 
	0x80c04040, 0x82c34141, 0x84c64242, 0x86c54343, 
	0x88cc4444, 0x8acf4545, 0x8cca4646, 0x8ec94747, 
	0x90d84848, 0x92db4949, 0x94de4a4a, 0x96dd4b4b, 
	0x98d44c4c, 0x9ad74d4d, 0x9cd24e4e, 0x9ed14f4f, 
	0xa0f05050, 0xa2f35151, 0xa4f65252, 0xa6f55353, 
	0xa8fc5454, 0xaaff5555, 0xacfa5656, 0xaef95757, 
	0xb0e85858, 0xb2eb5959, 0xb4ee5a5a, 0xb6ed5b5b, 
	0xb8e45c5c, 0xbae75d5d, 0xbce25e5e, 0xbee15f5f, 
	0xc0a06060, 0xc2a36161, 0xc4a66262, 0xc6a56363, 
	0xc8ac6464, 0xcaaf6565, 0xccaa6666, 0xcea96767, 
	0xd0b86868, 0xd2bb6969, 0xd4be6a6a, 0xd6bd6b6b, 
	0xd8b46c6c, 0xdab76d6d, 0xdcb26e6e, 0xdeb16f6f, 
	0xe0907070, 0xe2937171, 0xe4967272, 0xe6957373, 
	0xe89c7474, 0xea9f7575, 0xec9a7676, 0xee997777, 
	0xf0887878, 0xf28b7979, 0xf48e7a7a, 0xf68d7b7b, 
	0xf8847c7c, 0xfa877d7d, 0xfc827e7e, 0xfe817f7f, 
	0x1b9b8080, 0x19988181, 0x1f9d8282, 0x1d9e8383, 
	0x13978484, 0x11948585, 0x17918686, 0x15928787, 
	0x0b838888, 0x09808989, 0x0f858a8a, 0x0d868b8b, 
	0x038f8c8c, 0x018c8d8d, 0x07898e8e, 0x058a8f8f, 
	0x3bab9090, 0x39a89191, 0x3fad9292, 0x3dae9393, 
	0x33a79494, 0x31a49595, 0x37a19696, 0x35a29797, 
	0x2bb39898, 0x29b09999, 0x2fb59a9a, 0x2db69b9b, 
	0x23bf9c9c, 0x21bc9d9d, 0x27b99e9e, 0x25ba9f9f, 
	0x5bfba0a0, 0x59f8a1a1, 0x5ffda2a2, 0x5dfea3a3, 
	0x53f7a4a4, 0x51f4a5a5, 0x57f1a6a6, 0x55f2a7a7, 
	0x4be3a8a8, 0x49e0a9a9, 0x4fe5aaaa, 0x4de6abab, 
	0x43efacac, 0x41ecadad, 0x47e9aeae, 0x45eaafaf, 
	0x7bcbb0b0, 0x79c8b1b1, 0x7fcdb2b2, 0x7dceb3b3, 
	0x73c7b4b4, 0x71c4b5b5, 0x77c1b6b6, 0x75c2b7b7, 
	0x6bd3b8b8, 0x69d0b9b9, 0x6fd5baba, 0x6dd6bbbb, 
	0x63dfbcbc, 0x61dcbdbd, 0x67d9bebe, 0x65dabfbf, 
	0x9b5bc0c0, 0x9958c1c1, 0x9f5dc2c2, 0x9d5ec3c3, 
	0x9357c4c4, 0x9154c5c5, 0x9751c6c6, 0x9552c7c7, 
	0x8b43c8c8, 0x8940c9c9, 0x8f45caca, 0x8d46cbcb, 
	0x834fcccc, 0x814ccdcd, 0x8749cece, 0x854acfcf, 
	0xbb6bd0d0, 0xb968d1d1, 0xbf6dd2d2, 0xbd6ed3d3, 
	0xb367d4d4, 0xb164d5d5, 0xb761d6d6, 0xb562d7d7, 
	0xab73d8d8, 0xa970d9d9, 0xaf75dada, 0xad76dbdb, 
	0xa37fdcdc, 0xa17cdddd, 0xa779dede, 0xa57adfdf, 
	0xdb3be0e0, 0xd938e1e1, 0xdf3de2e2, 0xdd3ee3e3, 
	0xd337e4e4, 0xd134e5e5, 0xd731e6e6, 0xd532e7e7, 
	0xcb23e8e8, 0xc920e9e9, 0xcf25eaea, 0xcd26ebeb, 
	0xc32fecec, 0xc12ceded, 0xc729eeee, 0xc52aefef, 
	0xfb0bf0f0, 0xf908f1f1, 0xff0df2f2, 0xfd0ef3f3, 
	0xf307f4f4, 0xf104f5f5, 0xf701f6f6, 0xf502f7f7, 
	0xeb13f8f8, 0xe910f9f9, 0xef15fafa, 0xed16fbfb, 
	0xe31ffcfc, 0xe11cfdfd, 0xe719fefe, 0xe51affff, 
};
UNHIDE()
