#!/usr/bin/perl -w
#-
# brian m. carlson <sandals@crustytoothpaste.net> wrote this source code.
# This source code is in the public domain; you may do whatever you please with
# it.  However, a credit in the documentation, although not required, would be
# appreciated.

use strict;
use warnings;

sub generate_data {
	my ($line) = @_;

	return (undef, undef)
		unless $line =~ m/^([A-Za-z0-9-()]+)\s*:.*\((\d+\.\d+)\s+MiB\/s\).*$/;
	return ($1, $2 + 0.0);
}

if (scalar @ARGV < 2) {
	print STDERR <<EOM;
usage: compare-speed old new [factor]

old and new are the output of 'make speed'
factor (default 1.0) is an adjustment to new's speed
\tthat is, old and (new/factor) are the values computed
EOM
	exit 2;
}

my $factor = 1.0;
open(my $old, '<', $ARGV[0]) or die "cannot open file: $!";
my @oldbuf = <$old>;
close($old);
open(my $new, '<', $ARGV[1]) or die "cannot open file: $!";
my @newbuf = <$new>;
$factor = $ARGV[2] + 0.0 if (scalar @ARGV >= 3);
close($new);

my @items = ();
my %algos = ();

for my $line (@oldbuf) {
	my ($tag, $speed) = generate_data($line);
	next unless defined $tag;
	push @items, $tag;
	unless (exists $algos{$tag}) {
		$algos{$tag} = [];
	}
	push @{$algos{$tag}}, $speed;
}

my %counts = map { ($_, 0) } @items;
for my $line (@newbuf) {
	my ($tag, $new) = generate_data($line);
	next unless defined $tag;

	my $cnt = $counts{$tag}++;
	my $old = $algos{$tag}[$cnt];

	next unless $old;

	$new /= $factor;
	my $v = (($new - $old) / $old) * 100.0;
	printf "%-16s: change is %7.3f%%\n", $tag, $v;
}
