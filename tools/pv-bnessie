#!/usr/bin/perl -w
# This reads the Nessie test vector information for block ciphers.

$want = 0;
$cnt = -1;
$keysz = 0;
$blksz = 0;
$cursz = 0;
$wantsz = 0;

while (<>) {
	if (/Primitive Name:\s+(\w+)/) {
		printf "T%04x a%s\n", 0, $1;
	}
	elsif (/Key size:\s+(\d+)\s+bits/) {
		$keysz = int($1)/8;
		printf "T%04x K%d\n", 0, $keysz;
	}
	elsif (/Block size:\s+(\d+)\s+bits/) {
		$blksz = int($1)/8;
	}
	elsif (/key=([0-9A-Fa-f]+)/) {
		$cnt++;
		$cursz = length($1)/2;
		$wantsz = $keysz;
		$want = 1 if ($cursz < $wantsz);
		printf "T%04x k%s%s", $cnt, lc($1), $want ? "" : "\n";
	}
	elsif (/plain=([0-9A-Fa-f]+)/) {
		$cursz = length($1)/2;
		$wantsz = $blksz;
		$want = 1 if ($cursz < $wantsz);
		printf "T%04x p%s%s", $cnt, lc($1), $want ? "" : "\n";
	}
	elsif (/cipher=([0-9A-Fa-f]+)/) {
		$cursz = length($1)/2;
		$wantsz = $blksz;
		$want = 1 if ($cursz < $wantsz);
		printf "T%04x r1 c%s%s", $cnt, lc($1), $want ? "" : "\n";
	}
	elsif (/Iterated (\d+) times=([0-9A-Fa-f]+)/) {
		$cursz = length($2)/2;
		$wantsz = $blksz;
		$want = 1 if ($cursz < $wantsz);
		$cnt++;
		printf "T%04x r%d c%s%s", $cnt, $1, lc($2), $want ? "" : "\n";
	}
	elsif ($want && /([0-9A-Fa-f]+)/) {
		$cursz += length($1)/2;
		$want = 0 unless ($cursz < $wantsz);
		printf "%s%s", lc($1), $want ? "" : "\n";
	}
}
